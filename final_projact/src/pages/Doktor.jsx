import React, { useEffect, useState, useRef } from 'react'
import Header from '../components/Header'
import DoctorAI from '../assets/AIDoctor.png'
import Foot from '../components/Foot'
import axios from 'axios'
import '../index.css'

let apiKey = import.meta.env.VITE_GEMINI_API_KEY

export default function Doktor() {
    let [conversation, setConversation] = useState([])
    let [userInput, setUserInput] = useState('')
    let [error, setError] = useState('')
    let [isTyping, setIsTyping] = useState(false)
    const typingTimeoutRef = useRef(null)

    useEffect(() => {
        let savedConversation = sessionStorage.getItem('gemini_conversation')
        if (savedConversation) {
            setConversation(JSON.parse(savedConversation))
        }
        
        return () => {
            if (typingTimeoutRef.current) {
                clearTimeout(typingTimeoutRef.current)
            }
        }
    }, [])

    const handleClear = () => {
        setConversation([])
        sessionStorage.removeItem('gemini_conversation')
    }

    const typeWriterEffect = (text, index, callback) => {
        if (index < text.length) {
            const displayedText = text.substring(0, index + 1)
            callback(displayedText)
            typingTimeoutRef.current = setTimeout(() => {
                typeWriterEffect(text, index + 1, callback)
            }, 30) 
        } else {
            setIsTyping(false)
        }
    }

    let handleSubmit = async (e) => {
        e.preventDefault()
        try {
            if (!userInput.trim()) return
            
            let updatedConversation = [...conversation, { 
                type: 'question', 
                text: userInput,
                displayedText: userInput 
            }]
            setConversation(updatedConversation)
            setUserInput('')
            
            let prompt = `–ï—à“õ–∞–Ω–¥–∞–π –∞–±–∑–∞—Ü –∫–µ—Ä–µ–∫ –µ–º–µ—Å –∞–±–∑–∞—Ü—Ç—ã –Ω“Ø–∫—Ç–µ–º–µ–Ω –∂–∞–ª“ì–∞—Å—Ç—ã—Ä–∞ –±–µ—Ä—à—ñ.
                          –°–µ–Ω ‚Äî –º–µ–¥–∏—Ü–∏–Ω–∞–ª—ã“õ –µ–º–µ—Å –∫–µ“£–µ—Å –±–µ—Ä–µ—Ç—ñ–Ω –∫”©–º–µ–∫—à—ñ –±–æ—Ç—Å—ã“£.
                          –°–µ–Ω—ñ“£ –±–∞—Å—Ç—ã –º–∞“õ—Å–∞—Ç—ã“£ ‚Äî –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã“£ –±–µ–ª–≥—ñ–ª–µ—Ä—ñ –±–æ–π—ã–Ω—à–∞ –∞“õ–ø–∞—Ä–∞—Ç—Ç—ã“õ —Å–∏–ø–∞—Ç—Ç–∞ –∞–ª“ì–∞—à“õ—ã –∫–µ“£–µ—Å –±–µ—Ä—É –∂”ô–Ω–µ —Å–æ–ª –±–µ–ª–≥—ñ–ª–µ—Ä–≥–µ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã –∫–ª–∏–Ω–∏–∫–∞ –∂–∞–π–ª—ã –º”ô–ª—ñ–º–µ—Ç “±—Å—ã–Ω—É.
                          –ú—ñ–Ω–¥–µ—Ç—Ç—ñ —Ç“Ø—Ä–¥–µ –º—ã–Ω–∞ —Ç–∞–ª–∞–ø—Ç–∞—Ä–¥—ã –æ—Ä—ã–Ω–¥–∞:
                          üîí “ö–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ —Ç–∞–ª–∞–ø—Ç–∞—Ä—ã:
                          –ù–∞“õ—Ç—ã –¥–∏–∞–≥–Ω–æ–∑ –Ω–µ–º–µ—Å–µ –µ–º–¥–µ—É —Ç”ô—Å—ñ–ª–¥–µ—Ä—ñ–Ω –µ—à“õ–∞—à–∞–Ω –∞–π—Ç–ø–∞.
                          ‚Äì –î”ô—Ä—ñ-–¥”ô—Ä–º–µ–∫, –µ–º–¥–µ—É –∫—É—Ä—Å—ã, –∏–Ω—ä–µ–∫—Ü–∏—è, –º–µ–¥–∏—Ü–∏–Ω–∞–ª—ã“õ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–ª–∞—Ä “±—Å—ã–Ω—É“ì–∞ —Ç—ã–π—ã–º —Å–∞–ª—ã–Ω“ì–∞–Ω.
                          –¢–µ–∫ –∞–Ω—ã“õ—Ç–∞–º–∞–ª—ã“õ —Å–∏–ø–∞—Ç—Ç–∞“ì—ã –∞“õ–ø–∞—Ä–∞—Ç –±–µ—Ä:
                          ‚Äì –°–∏–º–ø—Ç–æ–º “õ–∞–Ω–¥–∞–π –∞—É—Ä—É“ì–∞ “±“õ—Å–∞–π—Ç—ã–Ω—ã–Ω –∞–π—Ç.
                          ‚Äì –ê—É—Ä—É–¥—ã“£ –∂“±“ì—É –∂–æ–ª–¥–∞—Ä—ã, –±–µ–ª–≥—ñ–ª–µ—Ä—ñ, “õ–∞—É—ñ–ø—Ç—ñ–ª—ñ–≥—ñ, –Ω–µ —ñ—Å—Ç–µ—É/–Ω–µ —ñ—Å—Ç–µ–º–µ—É –∫–µ—Ä–µ–∫—Ç—ñ–≥—ñ –∂–∞–π–ª—ã –∞“õ–ø–∞—Ä–∞—Ç –±–µ—Ä.
                          ‚Äì –ë—ñ—Ä–∞“õ –µ–º–¥–µ–º–µ –∂”ô–Ω–µ –Ω–∞“õ—Ç—ã –Ω“±—Å“õ–∞—É–ª—ã“õ “±—Å—ã–Ω–±–∞.
                          –ï–≥–µ—Ä –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã –µ–º —Å“±—Ä–∞—Å–∞ –Ω–µ–º–µ—Å–µ –¥–∏–∞–≥–Ω–æ–∑ “õ–æ–π–¥—ã—Ä–∞ –±–∞—Å—Ç–∞—Å–∞, –±—ã–ª–∞–π –∂–∞—É–∞–ø –±–µ—Ä:
                          "–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –º–µ–Ω –Ω–∞“õ—Ç—ã –µ–º–¥–µ—É —Ç”ô—Å—ñ–ª—ñ–Ω “±—Å—ã–Ω–∞ –∞–ª–º–∞–π–º—ã–Ω. –°—ñ–∑–≥–µ –¥”ô—Ä—ñ–≥–µ—Ä–≥–µ –∫”©—Ä—ñ–Ω—É “õ–∞–∂–µ—Ç."
                          ”ò—Ä“õ–∞—à–∞–Ω –º—ã–Ω–∞ –µ—Å–∫–µ—Ä—Ç—É–¥—ñ “õ–æ—Å:
                          ‚ö†Ô∏è –ù–∞–∑–∞—Ä –∞—É–¥–∞—Ä—ã“£—ã–∑: –ë“±–ª –±–æ—Ç —Ç–µ–∫ –∞“õ–ø–∞—Ä–∞—Ç—Ç—ã“õ –º–∞“õ—Å–∞—Ç—Ç–∞ –∞–ª“ì–∞—à“õ—ã –∫”©–º–µ–∫ “±—Å—ã–Ω–∞–¥—ã. –î–∏–∞–≥–Ω–æ–∑ “õ–æ—é“ì–∞ –Ω–µ–º–µ—Å–µ –µ–º-–¥–æ–º —Ç–∞“ì–∞–π—ã–Ω–¥–∞—É“ì–∞ “õ“±“õ—ã“ì—ã –∂–æ“õ. –°–∏–º–ø—Ç–æ–º –∫“Ø—à–µ–π—Å–µ –Ω–µ–º–µ—Å–µ –∫“Ø–º”ô–Ω —Ç—É—ã–Ω–¥–∞—Å–∞ ‚Äî –¥”ô—Ä—ñ–≥–µ—Ä–≥–µ –∂“Ø–≥—ñ–Ω—ñ“£—ñ–∑!
                          –ú–µ–Ω—ñ“£ –º—ã–Ω–∞–¥–∞–π —Å–∏–º–ø—Ç–æ–º—ã –±–∞—Ä: ['${userInput}']
                          –û—Å—ã —Å–∏–º–ø—Ç–æ–º –±–æ–π—ã–Ω—à–∞:
                          –ë“±–ª —Å–∏–º–ø—Ç–æ–º –Ω–∞“õ—Ç—ã “õ–∞–Ω–¥–∞–π –∞—É—Ä—É –±–æ–ª—É—ã –º“Ø–º–∫—ñ–Ω, –∞—É—Ä—É–¥—ã“£ –∞—Ç–∞—É—ã–Ω –∂–∞–∑.
                          –°–æ–ª –∞—É—Ä—É —Ç—É—Ä–∞–ª—ã –Ω–∞“õ—Ç—ã ”ô—Ä—ñ “õ—ã—Å“õ–∞ –º–µ–¥–∏—Ü–∏–Ω–∞–ª—ã“õ –∞“õ–ø–∞—Ä–∞—Ç –±–µ—Ä:
                          “ö–∞–ª–∞–π –∂“±“ì–∞–¥—ã (–∂“±“ì—É –∂–æ–ª–¥–∞—Ä—ã)
                          –ë–µ–ª–≥—ñ–ª–µ—Ä—ñ (—Å–∏–º–ø—Ç–æ–º–¥–∞—Ä—ã)
                          –ê—É—Ä—É–¥—ã“£ “õ–∞—É—ñ–ø—Ç—ñ–ª—ñ–≥—ñ (“õ–∞–Ω—à–∞–ª—ã“õ—Ç—ã “õ–∞—É—ñ–ø—Ç—ñ)
                          –ù–µ —ñ—Å—Ç–µ—É –∫–µ—Ä–µ–∫ / –Ω–µ —ñ—Å—Ç–µ—É–≥–µ –±–æ–ª–º–∞–π–¥—ã`

            let response = await axios.post(
                `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`,
                {
                    contents: [{ parts: [{ text: prompt }] }]
                },
                {
                    headers: { 'Content-Type': 'application/json' }
                }
            )

            let answer = response.data.candidates?.[0]?.content?.parts?.[0]?.text
            
            if (answer) {
                setIsTyping(true)
                updatedConversation = [...updatedConversation, { 
                    type: 'answer', 
                    text: answer,
                    displayedText: '' 
                }]
                setConversation(updatedConversation)
                
                typeWriterEffect(answer, 0, (displayedText) => {
                    setConversation(prev => {
                        const newConv = [...prev]
                        newConv[newConv.length - 1] = {
                            ...newConv[newConv.length - 1],
                            displayedText: displayedText
                        }
                        return newConv
                    })
                })
                
                sessionStorage.setItem('gemini_conversation', JSON.stringify(updatedConversation.map(item => ({
                    ...item,
                    displayedText: item.text 
                }))))
            }
        } catch (err) {
            setError(err.message)
            setUserInput('')
        }
    }
    
      const [position, setPosition] = useState(0);
      const [direction, setDirection] = useState(1);
    
      useEffect(() => {
        const interval = setInterval(() => {
          setPosition(prev => {
            
            if (prev >= 10) {
              setDirection(-1);
              return 9;
            }
            if (prev <= -10) {
              setDirection(1);
              return -9;
            }
            return prev + direction;
          });
        }, 50); 
    
        return () => clearInterval(interval);
      }, [direction]);

    return (
        <div>
            <Header/>
            <div className='display-element'></div>
            <section className='doktor'>
                <h1 className='doktor-text1'>–î–µ–Ω—Å–∞—É–ª—ã“õ ‚Äì –±–∞—Å—Ç—ã –±–∞–π–ª—ã“õ. –ë—ñ–∑–¥—ñ“£ Densaulyq.AI ‚Äì —Å—ñ–∑–¥—ñ“£ —Å–µ–Ω—ñ–º–¥—ñ —Å–µ—Ä—ñ–≥—ñ“£—ñ–∑.</h1>

                <div className='doctor-div1'>
                    <div className='AI-otvet bot-message'>
                        <div className="image-container">
                          <img className=' floating-image' style={{ transform: `translateY(${position}px)` }} src={DoctorAI} alt="" />
                          <div className="shadow"></div>
                        </div>
                        <p className='speech-bubble'>–ù–∞–∑–∞—Ä –∞—É–¥–∞—Ä—ã“£—ã–∑! Densaulyq.AI ‚Äî –±“±–ª –¥”ô—Ä—ñ–≥–µ—Ä –µ–º–µ—Å –∂”ô–Ω–µ –º–µ–¥–∏—Ü–∏–Ω–∞–ª—ã“õ “õ—ã–∑–º–µ—Ç –∫”©—Ä—Å–µ—Ç–ø–µ–π–¥—ñ. –ë—ñ–∑–¥—ñ“£ –∂–∞—Å–∞–Ω–¥—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∂“Ø–π–µ–º—ñ–∑ —Ç–µ–∫ –∞–Ω—ã“õ—Ç–∞–º–∞–ª—ã“õ —Å–∏–ø–∞—Ç—Ç–∞“ì—ã –∞“õ–ø–∞—Ä–∞—Ç “±—Å—ã–Ω–∞–¥—ã –∂”ô–Ω–µ –¥–∏–∞–≥–Ω–æ–∑ “õ–æ—é“ì–∞, –Ω–∞“õ—Ç—ã –µ–º–¥–µ—É —Ç”ô—Å—ñ–ª—ñ–Ω —Ç–∞“ì–∞–π—ã–Ω–¥–∞—É“ì–∞ “õ“±“õ—ã“ì—ã –∂–æ“õ.
                        –ë—ñ–∑–¥—ñ“£ –∂–∞—É–∞–ø—Ç–∞—Ä—ã–º—ã–∑ —Ç–µ–∫ –∞–ª“ì–∞—à“õ—ã –∞“õ–ø–∞—Ä–∞—Ç—Ç—ã“õ –∫”©–º–µ–∫ “õ“±—Ä–∞–ª—ã —Ä–µ—Ç—ñ–Ω–¥–µ “±—Å—ã–Ω—ã–ª–∞–¥—ã –∂”ô–Ω–µ –Ω–∞“õ—Ç—ã –º–µ–¥–∏—Ü–∏–Ω–∞–ª—ã“õ —à–µ—à—ñ–º–¥–µ—Ä–¥—ñ “õ–∞–±—ã–ª–¥–∞—É “Ø—à—ñ–Ω –º—ñ–Ω–¥–µ—Ç—Ç—ñ —Ç“Ø—Ä–¥–µ –±—ñ–ª—ñ–∫—Ç—ñ –¥”ô—Ä—ñ–≥–µ—Ä–≥–µ –∂“Ø–≥—ñ–Ω—É—ñ“£—ñ–∑ “õ–∞–∂–µ—Ç.
                        –ë—ñ–∑–¥—ñ“£ –∂“Ø–π–µ–Ω—ñ –ø–∞–π–¥–∞–ª–∞–Ω—É –∞—Ä“õ—ã–ª—ã —Å—ñ–∑ –æ—Å—ã –µ—Å–∫–µ—Ä—Ç—É–º–µ–Ω –∫–µ–ª—ñ—Å–µ—Å—ñ–∑ –∂”ô–Ω–µ –¥–µ–Ω—Å–∞—É–ª—ã“ì—ã“£—ã–∑“ì–∞ “õ–∞—Ç—ã—Å—Ç—ã –±–∞—Ä–ª—ã“õ —à–µ—à—ñ–º–¥—ñ ”©–∑ –∂–∞—É–∞–ø–∫–µ—Ä—à—ñ–ª—ñ–≥—ñ“£—ñ–∑–±–µ–Ω “õ–∞–±—ã–ª–¥–∞–π—Ç—ã–Ω—ã“£—ã–∑–¥—ã —Ç“Ø—Å—ñ–Ω–µ—Å—ñ–∑.</p> 
                    </div>

                    {conversation.map((item, index) => (
                        item.type === 'question' ? (
                            <div key={index} className='AI-otvet user-message'>
                                <p className='send'>{item.displayedText || item.text}</p>
                            </div>
                        ) : (
                            <div key={index} className='AI-otvet bot-message'>
                                <div className="image-container">
                                  <img className=' floating-image' style={{ transform: `translateY(${position}px)` }} src={DoctorAI} alt="" />
                                  <div className="shadow"></div>
                                </div>
                                <p className='speech-bubble'>{item.displayedText || ''}</p>     
                                {isTyping && index === conversation.length - 1 && (
                                    <span className="typing-cursor">|</span>
                                )}
                            </div>
                        )
                    ))}
                </div>
                
                {error &&
                    <div className='error-message'>
                        “ö–∞—Ç–µ: {error}
                    </div>
                }
                
                <div className='message-controls'>
                    <form onSubmit={handleSubmit} className='message-form'>
                        <input
                            className='message-input'
                            type="text"
                            placeholder='–°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã “õ–æ–π—ã“£—ã–∑?'
                            onChange={(e) => setUserInput(e.target.value)}
                            value={userInput}
                            disabled={isTyping}
                        />
                        <button 
                            type='submit' 
                            className='send-button'
                            disabled={isTyping}
                        >
                            {isTyping ? '–ñ–∞—É–∞–ø –∂–∞–∑—ã–ª—É–¥–∞...' : '–ñ—ñ–±–µ—Ä—É'}
                        </button>
                        <button 
                            onClick={handleClear} 
                            className='send-button'
                            disabled={isTyping}
                        >
                            –¢–∞–∑–∞–ª–∞—É
                        </button>
                    </form>
                </div>
            </section>
            <Foot/>
        </div>
    )
}